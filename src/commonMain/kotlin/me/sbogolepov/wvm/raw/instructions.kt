package me.sbogolepov.wvm.raw

import me.sbogolepov.wvm.parser.generator.ValueType

sealed class Instruction {
}


object Unreachable : Instruction()
object NOP : Instruction()


sealed class ResultType {
    object Empty : ResultType()
    class Value(val valueType: ValueType) : ResultType()
}

class Block(val type: ResultType, val body: Array<Instruction>) : Instruction()

class Loop(val type: ResultType, val body: Array<Instruction>) : Instruction()
class IfElse(val type: ResultType, val tru: Array<Instruction>, val fls: Array<Instruction>) : Instruction()

class Br(val labelIdx: UInt): Instruction()
class BrIf(val labelIdx: UInt): Instruction()
class BrTable(val table: Array<UInt>, val default: UInt): Instruction()
object Return: Instruction()
class Call(val function: UInt): Instruction()
class CallIndirect(val typeIdx: UInt): Instruction()

object Drop : Instruction()
object Select : Instruction()

class LocalGet(val localIdx: UInt) : Instruction()
class LocalSet(val localIdx: UInt) : Instruction()
class LocalTee(val localIdx: UInt) : Instruction()
class GlobalGet(val globalIdx: UInt) : Instruction()
class GlobalSet(val globalIdx: UInt) : Instruction()

class MemArg(val align: UInt, val offset: UInt)

object MemorySize : Instruction()
object MemoryGrow : Instruction()

class I32Load(val memArg: MemArg) : Instruction()
class I64Load(val memArg: MemArg) : Instruction()
class F32Load(val memArg: MemArg) : Instruction()
class F64Load(val memArg: MemArg) : Instruction()
class I32Load8s(val memArg: MemArg) : Instruction()
class I32Load8u(val memArg: MemArg) : Instruction()
class I32Load16s(val memArg: MemArg) : Instruction()
class I32Load16u(val memArg: MemArg) : Instruction()
class I64Load8s(val memArg: MemArg) : Instruction()
class I64Load8u(val memArg: MemArg) : Instruction()
class I64Load16s(val memArg: MemArg) : Instruction()
class I64Load16u(val memArg: MemArg) : Instruction()
class I64Load32s(val memArg: MemArg) : Instruction()
class I64Load32u(val memArg: MemArg) : Instruction()
class I32Store(val memArg: MemArg) : Instruction()
class I64Store(val memArg: MemArg) : Instruction()
class F32Store(val memArg: MemArg) : Instruction()
class F64Store(val memArg: MemArg) : Instruction()
class I32Store8(val memArg: MemArg) : Instruction()
class I32Store16(val memArg: MemArg) : Instruction()
class I64Store8(val memArg: MemArg) : Instruction()
class I64Store16(val memArg: MemArg) : Instruction()
class I64Store32(val memArg: MemArg) : Instruction()

class I32Const(val value: Int) : Instruction()
class I64Const(val value: Long) : Instruction()
class F32Const(val value: Float) : Instruction()
class F64Const(val value: Double) : Instruction()

class I32Eqz() : Instruction()
class I32Eq() : Instruction()
class I32Ne() : Instruction()
class I32Lts() : Instruction()
class I32Ltu() : Instruction()
class I32Gts() : Instruction()
class I32Gtu() : Instruction()
class I32Les() : Instruction()
class I32Leu() : Instruction()
class I32Ges() : Instruction()
class I32Geu() : Instruction()
class I64Eqz() : Instruction()
class I64Eq() : Instruction()
class I64Ne() : Instruction()
class I64Lts() : Instruction()
class I64Ltu() : Instruction()
class I64Gts() : Instruction()
class I64Gtu() : Instruction()
class I64Les() : Instruction()
class I64Leu() : Instruction()
class I64Ges() : Instruction()
class I64Geu() : Instruction()

class F32Eq() : Instruction()
class F32Ne() : Instruction()
class F32Lt() : Instruction()
class F32Gt() : Instruction()
class F32Le() : Instruction()
class F32Ge() : Instruction()
class F64Eq() : Instruction()
class F64Ne() : Instruction()
class F64Lt() : Instruction()
class F64Gt() : Instruction()
class F64Le() : Instruction()
class F64Ge() : Instruction()

class I32Clz() : Instruction()
class I32Ctz() : Instruction()
class I32Popcnt() : Instruction()
class I32Add() : Instruction()
class I32Sub() : Instruction()
class I32Mul() : Instruction()
class I32Divs() : Instruction()
class I32Divu() : Instruction()
class I32Rems() : Instruction()
class I32Remu() : Instruction()
class I32And() : Instruction()
class I32Or() : Instruction()
class I32Xor() : Instruction()
class I32Shl() : Instruction()
class I32Shrs() : Instruction()
class I32Shru() : Instruction()
class I32Rotl() : Instruction()
class I32Rotr() : Instruction()
class I64Clz() : Instruction()
class I64Ctz() : Instruction()
class I64Popcnt() : Instruction()
class I64Add() : Instruction()
class I64Sub() : Instruction()
class I64Mul() : Instruction()
class I64Divs() : Instruction()
class I64Divu() : Instruction()
class I64Rems() : Instruction()
class I64Remu() : Instruction()
class I64And() : Instruction()
class I64Or() : Instruction()
class I64Xor() : Instruction()
class I64Shl() : Instruction()
class I64Shrs() : Instruction()
class I64Shru() : Instruction()
class I64Rotl() : Instruction()
class I64Rotr() : Instruction()

class F32Abs() : Instruction()
class F32Neg() : Instruction()
class F32Ceil() : Instruction()
class F32Floor() : Instruction()
class F32Trunc() : Instruction()
class F32Nearest() : Instruction()
class F32Sqrt() : Instruction()
class F32Add() : Instruction()
class F32Sub() : Instruction()
class F32Mul() : Instruction()
class F32Div() : Instruction()
class F32Min() : Instruction()
class F32Max() : Instruction()
class F32Copysign() : Instruction()
class F64Abs() : Instruction()
class F64Neg() : Instruction()
class F64Ceil() : Instruction()
class F64Floor() : Instruction()
class F64Trunc() : Instruction()
class F64Nearest() : Instruction()
class F64Sqrt() : Instruction()
class F64Add() : Instruction()
class F64Sub() : Instruction()
class F64Mul() : Instruction()
class F64Div() : Instruction()
class F64Min() : Instruction()
class F64Max() : Instruction()
class F64Copysign() : Instruction()

object I32WrapI64 : Instruction()
object I32TruncF32s : Instruction()
object I32TruncF32u : Instruction()
object I32TruncF64s : Instruction()
object I32TruncF64u : Instruction()
object I64ExtendI32s : Instruction()
object I64ExtendI32u : Instruction()
object I64TruncF32s : Instruction()
object I64TruncF32u : Instruction()
object I64TruncF64s : Instruction()
object I64TruncF64u : Instruction()
object F32ConvertI32s : Instruction()
object F32ConvertI32u : Instruction()
object F32ConvertI64s : Instruction()
object F32ConvertI64u : Instruction()
object F32DemoteF64 : Instruction()
object F64ConvertI32s : Instruction()
object F64ConvertI32u : Instruction()
object F64ConvertI64s : Instruction()
object F64ConvertI64u : Instruction()
object F64PromoteF64 : Instruction()
object I32ReinterpretF32 : Instruction()
object I64ReinterpretF64 : Instruction()
object F32ReinterpretI32 : Instruction()
object F64ReinterpretI64 : Instruction()